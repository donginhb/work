#if !defined(AFX_SCREEN2VIDEO_H__F33A71B8_1386_407E_8F09_938C1E0DD69E__INCLUDED_)
#define AFX_SCREEN2VIDEO_H__F33A71B8_1386_407E_8F09_938C1E0DD69E__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000
// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


// Dispatch interfaces referenced by this interface
class CVideoCompressors;
class CAudioCompressors;
class CWMVProfiles;
class CAudioInputPins;
class CAudioDevices;

/////////////////////////////////////////////////////////////////////////////
// CScreen2Video wrapper class

class CScreen2Video : public CWnd
{
protected:
	DECLARE_DYNCREATE(CScreen2Video)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0xc1e943ed, 0x5a44, 0x4688, { 0x94, 0x4c, 0x9b, 0x7c, 0x3c, 0x82, 0x51, 0x3b } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName,
		LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect,
		CWnd* pParentWnd, UINT nID,
		CCreateContext* pContext = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); }

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect, CWnd* pParentWnd, UINT nID,
		CFile* pPersist = NULL, BOOL bStorage = FALSE,
		BSTR bstrLicKey = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); }

// Attributes
public:
	short GetVideoCompressor();
	void SetVideoCompressor(short);
	CVideoCompressors GetVideoCompressors();
	void SetVideoCompressors(LPDISPATCH);
	CString GetFileName();
	void SetFileName(LPCTSTR);
	BOOL GetUseVideoCompressor();
	void SetUseVideoCompressor(BOOL);
	BOOL GetCaptureAudio();
	void SetCaptureAudio(BOOL);
	short GetAudioCompressor();
	void SetAudioCompressor(short);
	BOOL GetUseAudioCompressor();
	void SetUseAudioCompressor(BOOL);
	CAudioCompressors GetAudioCompressors();
	void SetAudioCompressors(LPDISPATCH);
	short GetWMVProfile();
	void SetWMVProfile(short);
	CWMVProfiles GetWMVProfiles();
	void SetWMVProfiles(LPDISPATCH);
	CString GetWMVCustomProfile();
	void SetWMVCustomProfile(LPCTSTR);
	short GetCaptureLeft();
	void SetCaptureLeft(short);
	short GetCaptureTop();
	void SetCaptureTop(short);
	short GetCaptureWidth();
	void SetCaptureWidth(short);
	short GetCaptureHeight();
	void SetCaptureHeight(short);
	CString GetLicenseKey();
	void SetLicenseKey(LPCTSTR);
	BOOL GetCaptureCursor();
	void SetCaptureCursor(BOOL);
	short GetFps();
	void SetFps(short);
	CAudioInputPins GetAudioInputPins();
	void SetAudioInputPins(LPDISPATCH);
	short GetAudioInputPin();
	void SetAudioInputPin(short);
	short GetAudioDevice();
	void SetAudioDevice(short);
	CAudioDevices GetAudioDevices();
	void SetAudioDevices(LPDISPATCH);
	long GetCaptureHWND();
	void SetCaptureHWND(long);
	long GetSWFAudioBitrate();
	void SetSWFAudioBitrate(long);
	long GetSWFAudioChannels();
	void SetSWFAudioChannels(long);
	long GetSWFAudioSampleRate();
	void SetSWFAudioSampleRate(long);
	short GetSWFOutputWidth();
	void SetSWFOutputWidth(short);
	short GetSWFOutputHeight();
	void SetSWFOutputHeight(short);
	long GetSWFVideoBitrate();
	void SetSWFVideoBitrate(long);
	long GetOutputType();
	void SetOutputType(long);
	long GetFLVAudioBitrate();
	void SetFLVAudioBitrate(long);
	long GetFLVAudioChannels();
	void SetFLVAudioChannels(long);
	long GetFLVAudioSampleRate();
	void SetFLVAudioSampleRate(long);
	long GetFLVVideoBitrate();
	void SetFLVVideoBitrate(long);
	short GetFLVOutputHeight();
	void SetFLVOutputHeight(short);
	short GetFLVOutputWidth();
	void SetFLVOutputWidth(short);

// Operations
public:
	BOOL Start();
	void Stop();
	short ScreenWidth();
	short ScreenHeight();
	BOOL RefreshAudioInputPin(short iAudioDeviceIndex);
	void Pause();
	void Resume();
	void AboutBox();
};

/////////////////////////////////////////////////////////////////////////////
// IWMVProfiles wrapper class

class IWMVProfiles : public COleDispatchDriver
{
public:
	IWMVProfiles() {}		// Calls COleDispatchDriver default constructor
	IWMVProfiles(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IWMVProfiles(const IWMVProfiles& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	short GetCount();
	void SetCount(short);

// Operations
public:
	short FindWMVProfile(LPCTSTR strProfile);
	CString FindWMVProfileDesc(short index);
	CString FindWMVProfileName(short index);
	LPDISPATCH GetItem(const VARIANT& Key);
};
/////////////////////////////////////////////////////////////////////////////
// IVideoCompressors wrapper class

class IVideoCompressors : public COleDispatchDriver
{
public:
	IVideoCompressors() {}		// Calls COleDispatchDriver default constructor
	IVideoCompressors(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IVideoCompressors(const IVideoCompressors& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	short GetCount();
	void SetCount(short);

// Operations
public:
	short FindVideoCompressor(LPCTSTR strName);
	CString FindVideoCompressorName(short index);
	LPDISPATCH GetItem(const VARIANT& Key);
	BOOL ShowPropertyPage(short iIndex);
};
/////////////////////////////////////////////////////////////////////////////
// IAudioCompressors wrapper class

class IAudioCompressors : public COleDispatchDriver
{
public:
	IAudioCompressors() {}		// Calls COleDispatchDriver default constructor
	IAudioCompressors(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IAudioCompressors(const IAudioCompressors& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	short GetCount();
	void SetCount(short);

// Operations
public:
	short FindAudioCompressor(LPCTSTR strName);
	CString FindAudioCompressorName(short index);
	LPDISPATCH GetItem(const VARIANT& Key);
};
/////////////////////////////////////////////////////////////////////////////
// IAudioInputPins wrapper class

class IAudioInputPins : public COleDispatchDriver
{
public:
	IAudioInputPins() {}		// Calls COleDispatchDriver default constructor
	IAudioInputPins(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IAudioInputPins(const IAudioInputPins& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	short GetCount();
	void SetCount(short);

// Operations
public:
	short FindInputPin(LPCTSTR strInputPinName);
	CString FindInputPinName(short index);
	LPDISPATCH GetItem(const VARIANT& Key);
};
/////////////////////////////////////////////////////////////////////////////
// IAudioDevices wrapper class

class IAudioDevices : public COleDispatchDriver
{
public:
	IAudioDevices() {}		// Calls COleDispatchDriver default constructor
	IAudioDevices(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IAudioDevices(const IAudioDevices& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	short GetCount();
	void SetCount(short);

// Operations
public:
	short FindDevice(LPCTSTR strDeviceName);
	CString FindDeviceName(short index);
	LPDISPATCH GetItem(const VARIANT& Key);
};
/////////////////////////////////////////////////////////////////////////////
// _DScreen2Video wrapper class

class _DScreen2Video : public COleDispatchDriver
{
public:
	_DScreen2Video() {}		// Calls COleDispatchDriver default constructor
	_DScreen2Video(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	_DScreen2Video(const _DScreen2Video& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	short GetVideoCompressor();
	void SetVideoCompressor(short);
	LPDISPATCH GetVideoCompressors();
	void SetVideoCompressors(LPDISPATCH);
	CString GetFileName();
	void SetFileName(LPCTSTR);
	BOOL GetUseVideoCompressor();
	void SetUseVideoCompressor(BOOL);
	BOOL GetCaptureAudio();
	void SetCaptureAudio(BOOL);
	short GetAudioCompressor();
	void SetAudioCompressor(short);
	BOOL GetUseAudioCompressor();
	void SetUseAudioCompressor(BOOL);
	LPDISPATCH GetAudioCompressors();
	void SetAudioCompressors(LPDISPATCH);
	short GetWMVProfile();
	void SetWMVProfile(short);
	LPDISPATCH GetWMVProfiles();
	void SetWMVProfiles(LPDISPATCH);
	CString GetWMVCustomProfile();
	void SetWMVCustomProfile(LPCTSTR);
	short GetCaptureLeft();
	void SetCaptureLeft(short);
	short GetCaptureTop();
	void SetCaptureTop(short);
	short GetCaptureWidth();
	void SetCaptureWidth(short);
	short GetCaptureHeight();
	void SetCaptureHeight(short);
	CString GetLicenseKey();
	void SetLicenseKey(LPCTSTR);
	BOOL GetCaptureCursor();
	void SetCaptureCursor(BOOL);
	short GetFps();
	void SetFps(short);
	LPDISPATCH GetAudioInputPins();
	void SetAudioInputPins(LPDISPATCH);
	short GetAudioInputPin();
	void SetAudioInputPin(short);
	short GetAudioDevice();
	void SetAudioDevice(short);
	LPDISPATCH GetAudioDevices();
	void SetAudioDevices(LPDISPATCH);
	long GetCaptureHWND();
	void SetCaptureHWND(long);
	long GetSWFAudioBitrate();
	void SetSWFAudioBitrate(long);
	long GetSWFAudioChannels();
	void SetSWFAudioChannels(long);
	long GetSWFAudioSampleRate();
	void SetSWFAudioSampleRate(long);
	short GetSWFOutputWidth();
	void SetSWFOutputWidth(short);
	short GetSWFOutputHeight();
	void SetSWFOutputHeight(short);
	long GetSWFVideoBitrate();
	void SetSWFVideoBitrate(long);
	long GetOutputType();
	void SetOutputType(long);
	long GetFLVAudioBitrate();
	void SetFLVAudioBitrate(long);
	long GetFLVAudioChannels();
	void SetFLVAudioChannels(long);
	long GetFLVAudioSampleRate();
	void SetFLVAudioSampleRate(long);
	long GetFLVVideoBitrate();
	void SetFLVVideoBitrate(long);
	short GetFLVOutputHeight();
	void SetFLVOutputHeight(short);
	short GetFLVOutputWidth();
	void SetFLVOutputWidth(short);

// Operations
public:
	BOOL Start();
	void Stop();
	short ScreenWidth();
	short ScreenHeight();
	BOOL RefreshAudioInputPin(short iAudioDeviceIndex);
	void Pause();
	void Resume();
	void AboutBox();
};
/////////////////////////////////////////////////////////////////////////////
// _DScreen2VideoEvents wrapper class

class _DScreen2VideoEvents : public COleDispatchDriver
{
public:
	_DScreen2VideoEvents() {}		// Calls COleDispatchDriver default constructor
	_DScreen2VideoEvents(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	_DScreen2VideoEvents(const _DScreen2VideoEvents& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:

// Operations
public:
};
/////////////////////////////////////////////////////////////////////////////
// IVideoCompressor wrapper class

class IVideoCompressor : public COleDispatchDriver
{
public:
	IVideoCompressor() {}		// Calls COleDispatchDriver default constructor
	IVideoCompressor(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IVideoCompressor(const IVideoCompressor& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	CString GetName();
	void SetName(LPCTSTR);

// Operations
public:
};
/////////////////////////////////////////////////////////////////////////////
// IEnumVideoCompressors wrapper class

class IEnumVideoCompressors : public COleDispatchDriver
{
public:
	IEnumVideoCompressors() {}		// Calls COleDispatchDriver default constructor
	IEnumVideoCompressors(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IEnumVideoCompressors(const IEnumVideoCompressors& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:

// Operations
public:
};
/////////////////////////////////////////////////////////////////////////////
// IAudioCompressor wrapper class

class IAudioCompressor : public COleDispatchDriver
{
public:
	IAudioCompressor() {}		// Calls COleDispatchDriver default constructor
	IAudioCompressor(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IAudioCompressor(const IAudioCompressor& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	CString GetName();
	void SetName(LPCTSTR);

// Operations
public:
};
/////////////////////////////////////////////////////////////////////////////
// IEnumAudioCompressors wrapper class

class IEnumAudioCompressors : public COleDispatchDriver
{
public:
	IEnumAudioCompressors() {}		// Calls COleDispatchDriver default constructor
	IEnumAudioCompressors(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IEnumAudioCompressors(const IEnumAudioCompressors& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:

// Operations
public:
};
/////////////////////////////////////////////////////////////////////////////
// IWMVProfile wrapper class

class IWMVProfile : public COleDispatchDriver
{
public:
	IWMVProfile() {}		// Calls COleDispatchDriver default constructor
	IWMVProfile(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IWMVProfile(const IWMVProfile& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	CString GetName();
	void SetName(LPCTSTR);
	CString GetDescription();
	void SetDescription(LPCTSTR);

// Operations
public:
};
/////////////////////////////////////////////////////////////////////////////
// IEnumWMVProfiles wrapper class

class IEnumWMVProfiles : public COleDispatchDriver
{
public:
	IEnumWMVProfiles() {}		// Calls COleDispatchDriver default constructor
	IEnumWMVProfiles(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IEnumWMVProfiles(const IEnumWMVProfiles& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:

// Operations
public:
};
/////////////////////////////////////////////////////////////////////////////
// IAudioInputPin wrapper class

class IAudioInputPin : public COleDispatchDriver
{
public:
	IAudioInputPin() {}		// Calls COleDispatchDriver default constructor
	IAudioInputPin(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IAudioInputPin(const IAudioInputPin& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	CString GetName();
	void SetName(LPCTSTR);

// Operations
public:
};
/////////////////////////////////////////////////////////////////////////////
// IEnumAudioInputPins wrapper class

class IEnumAudioInputPins : public COleDispatchDriver
{
public:
	IEnumAudioInputPins() {}		// Calls COleDispatchDriver default constructor
	IEnumAudioInputPins(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IEnumAudioInputPins(const IEnumAudioInputPins& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:

// Operations
public:
};
/////////////////////////////////////////////////////////////////////////////
// IAudioDevice wrapper class

class IAudioDevice : public COleDispatchDriver
{
public:
	IAudioDevice() {}		// Calls COleDispatchDriver default constructor
	IAudioDevice(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IAudioDevice(const IAudioDevice& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:
	CString GetName();
	void SetName(LPCTSTR);

// Operations
public:
};
/////////////////////////////////////////////////////////////////////////////
// IEnumAudioDevices wrapper class

class IEnumAudioDevices : public COleDispatchDriver
{
public:
	IEnumAudioDevices() {}		// Calls COleDispatchDriver default constructor
	IEnumAudioDevices(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	IEnumAudioDevices(const IEnumAudioDevices& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:

// Operations
public:
};
//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.

#endif // !defined(AFX_SCREEN2VIDEO_H__F33A71B8_1386_407E_8F09_938C1E0DD69E__INCLUDED_)
